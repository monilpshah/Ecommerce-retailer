"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tslint_1 = require("tslint");
var component_data_1 = require("../material/component-data");
var ts = require("typescript");
var literal_1 = require("../typescript/literal");
/** Message that is being sent to TSLint if a string literal still uses the outdated prefix. */
var failureMessage = 'String literal can be switched from "Md" prefix to "Mat".';
/**
 * Rule that walks through every string literal, which includes the outdated Material prefix and
 * is part of a call expression. Those string literals will be changed to the new prefix.
 */
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new SwitchStringLiteralsWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(tslint_1.Rules.AbstractRule));
exports.Rule = Rule;
var SwitchStringLiteralsWalker = (function (_super) {
    __extends(SwitchStringLiteralsWalker, _super);
    function SwitchStringLiteralsWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SwitchStringLiteralsWalker.prototype.visitStringLiteral = function (stringLiteral) {
        if (stringLiteral.parent.kind !== ts.SyntaxKind.CallExpression) {
            return;
        }
        var updatedText = stringLiteral.getText();
        component_data_1.elementSelectors.forEach(function (selector) {
            updatedText = literal_1.replaceAll(updatedText, selector.md, selector.mat);
        });
        component_data_1.attributeSelectors.forEach(function (attribute) {
            updatedText = literal_1.replaceAll(updatedText, component_data_1.removeAttributeBackets(attribute.md), component_data_1.removeAttributeBackets(attribute.mat));
        });
        if (updatedText !== stringLiteral.getText()) {
            var replacement = this.createReplacement(stringLiteral.getStart(), stringLiteral.getWidth(), updatedText);
            this.addFailureAtNode(stringLiteral, failureMessage, replacement);
        }
    };
    return SwitchStringLiteralsWalker;
}(tslint_1.RuleWalker));
exports.SwitchStringLiteralsWalker = SwitchStringLiteralsWalker;
//# sourceMappingURL=switchStringLiteralsRule.js.map