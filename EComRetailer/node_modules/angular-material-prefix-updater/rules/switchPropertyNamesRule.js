"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tslint_1 = require("tslint");
var component_data_1 = require("../material/component-data");
var ts = require("typescript");
/** Message that is being sent to TSLint if a string literal still uses the outdated prefix. */
var failureMessage = 'Property access expression can be switched from "Md" prefix to "Mat".';
/**
 * Rule that walks through every property access expression and updates properties that have
 * been changed in favor of the new prefix.
 */
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new SwitchPropertyNamesWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(tslint_1.Rules.AbstractRule));
exports.Rule = Rule;
var SwitchPropertyNamesWalker = (function (_super) {
    __extends(SwitchPropertyNamesWalker, _super);
    function SwitchPropertyNamesWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SwitchPropertyNamesWalker.prototype.visitPropertyAccessExpression = function (prop) {
        // Recursively call this method for the expression of the current property expression.
        // It can happen that there is a chain of property access expressions.
        // For example: "mySortInstance.mdSortChange.subscribe()"
        if (prop.expression && prop.expression.kind === ts.SyntaxKind.PropertyAccessExpression) {
            this.visitPropertyAccessExpression(prop.expression);
        }
        var propertyData = component_data_1.propertyNames.find(function (name) { return prop.name.getText() === name.md; });
        if (!propertyData) {
            return;
        }
        var replacement = this.createReplacement(prop.name.getStart(), prop.name.getWidth(), propertyData.mat);
        this.addFailureAtNode(prop.name, failureMessage, replacement);
    };
    return SwitchPropertyNamesWalker;
}(tslint_1.RuleWalker));
exports.SwitchPropertyNamesWalker = SwitchPropertyNamesWalker;
//# sourceMappingURL=switchPropertyNamesRule.js.map