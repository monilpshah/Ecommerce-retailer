"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tslint_1 = require("tslint");
var component_walker_1 = require("../tslint/component-walker");
var component_data_1 = require("../material/component-data");
var literal_1 = require("../typescript/literal");
var glob_1 = require("glob");
/**
 * A glob string needs to be transferred from the CLI process to the child process of TSLint.
 * This is the environment variable, which will be set if the `--extra-stylesheets` option is set.
 */
exports.EXTRA_STYLESHEETS_GLOB_KEY = 'MD_EXTRA_STYLESHEETS_GLOB';
/**
 * Message that is being sent to TSLint if there is something in the stylesheet that still use an
 * outdated prefix.
 */
var failureMessage = 'Stylesheet uses outdated Material prefix.';
/**
 * Rule that walks through every component decorator and updates their inline or external
 * stylesheets.
 */
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new SwitchStylesheetsWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(tslint_1.Rules.AbstractRule));
exports.Rule = Rule;
var SwitchStylesheetsWalker = (function (_super) {
    __extends(SwitchStylesheetsWalker, _super);
    function SwitchStylesheetsWalker(sourceFile, options) {
        var _this = _super.call(this, sourceFile, options) || this;
        // This is a special feature. In some applications, developers will have global stylesheets
        // that are not specified in any Angular component. Those stylesheets can be also migrated
        // if the developer specifies the `--extra-stylesheets` option which accepts a glob for files.
        if (process.env[exports.EXTRA_STYLESHEETS_GLOB_KEY]) {
            process.env[exports.EXTRA_STYLESHEETS_GLOB_KEY].split(' ')
                .map(function (glob) { return glob_1.sync(glob); })
                .forEach(function (files) { return files.forEach(function (styleUrl) { return _this._reportExternalStyle(styleUrl); }); });
        }
        return _this;
    }
    SwitchStylesheetsWalker.prototype.visitInlineStylesheet = function (stylesheet) {
        var newStylesheetText = this.replacePrefixesInStylesheet(stylesheet.getText());
        if (newStylesheetText !== stylesheet.getText()) {
            var replacement = this.createReplacement(stylesheet.getStart(), stylesheet.getWidth(), newStylesheetText);
            this.addFailureAtNode(stylesheet, failureMessage, replacement);
        }
    };
    SwitchStylesheetsWalker.prototype.visitExternalStylesheet = function (stylesheet) {
        var newStylesheetText = this.replacePrefixesInStylesheet(stylesheet.getFullText());
        if (newStylesheetText !== stylesheet.getFullText()) {
            var replacement = this.createReplacement(stylesheet.getStart(), stylesheet.getWidth(), newStylesheetText);
            this.addExternalResourceFailure(stylesheet, failureMessage, replacement);
        }
    };
    /**
     * Replaces the outdated prefix in the stylesheet with the new one and returns an updated
     * stylesheet.
     */
    SwitchStylesheetsWalker.prototype.replacePrefixesInStylesheet = function (stylesheetContent) {
        component_data_1.elementSelectors.concat(component_data_1.attributeSelectors).forEach(function (selector) {
            stylesheetContent = literal_1.replaceAll(stylesheetContent, selector.md, selector.mat);
        });
        component_data_1.inputNames.forEach(function (input) {
            stylesheetContent = literal_1.replaceAll(stylesheetContent, "[" + input.md + "]", "[" + input.mat + "]");
        });
        return stylesheetContent;
    };
    return SwitchStylesheetsWalker;
}(component_walker_1.ComponentWalker));
exports.SwitchStylesheetsWalker = SwitchStylesheetsWalker;
//# sourceMappingURL=switchStylesheetsRule.js.map