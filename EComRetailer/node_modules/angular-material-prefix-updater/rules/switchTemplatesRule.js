"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tslint_1 = require("tslint");
var component_data_1 = require("../material/component-data");
var component_walker_1 = require("../tslint/component-walker");
var literal_1 = require("../typescript/literal");
/**
 * Message that is being sent to TSLint if there is something in the template that still use an
 * outdated prefix.
 */
var failureMessage = 'Template uses outdated Material prefix.';
/**
 * Rule that walks through every component decorator and updates their inline or external
 * templates.
 */
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new SwitchTemplatesWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(tslint_1.Rules.AbstractRule));
exports.Rule = Rule;
var SwitchTemplatesWalker = (function (_super) {
    __extends(SwitchTemplatesWalker, _super);
    function SwitchTemplatesWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SwitchTemplatesWalker.prototype.visitInlineTemplate = function (template) {
        var newTemplateText = this.replacePrefixesInTemplate(template.getText());
        if (newTemplateText !== template.getText()) {
            var replacement = this.createReplacement(template.getStart(), template.getWidth(), newTemplateText);
            this.addFailureAtNode(template, failureMessage, replacement);
        }
    };
    SwitchTemplatesWalker.prototype.visitExternalTemplate = function (template) {
        var newTemplateText = this.replacePrefixesInTemplate(template.getFullText());
        if (newTemplateText !== template.getFullText()) {
            var replacement = this.createReplacement(template.getStart(), template.getWidth(), newTemplateText);
            this.addExternalResourceFailure(template, failureMessage, replacement);
        }
    };
    /**
     * Replaces the outdated prefix in the template with the new one and returns an updated template.
     */
    SwitchTemplatesWalker.prototype.replacePrefixesInTemplate = function (templateContent) {
        component_data_1.elementSelectors.forEach(function (selector) {
            // Being more aggressive with that replacement here allows us to also handle inline
            // style elements. Normally we would check if the selector is surrounded by the HTML tag
            // characters.
            templateContent = literal_1.replaceAll(templateContent, selector.md, selector.mat);
        });
        component_data_1.attributeSelectors.forEach(function (attribute) {
            templateContent = literal_1.replaceAll(templateContent, component_data_1.removeAttributeBackets(attribute.md), component_data_1.removeAttributeBackets(attribute.mat));
        });
        component_data_1.inputNames.concat(component_data_1.exportAsNames).forEach(function (selector) {
            templateContent = literal_1.replaceAll(templateContent, selector.md, selector.mat);
        });
        return templateContent;
    };
    return SwitchTemplatesWalker;
}(component_walker_1.ComponentWalker));
exports.SwitchTemplatesWalker = SwitchTemplatesWalker;
//# sourceMappingURL=switchTemplatesRule.js.map