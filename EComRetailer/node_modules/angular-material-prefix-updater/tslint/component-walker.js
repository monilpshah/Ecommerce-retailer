"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * TSLint custom walker implementation that also visits external and inline templates.
 */
var tslint_1 = require("tslint");
var literal_1 = require("../typescript/literal");
var path_1 = require("path");
var component_file_1 = require("./component-file");
var fs_1 = require("fs");
var ts = require("typescript");
/**
 * Custom TSLint rule walker that identifies Angular components and visits specific parts of
 * the component metadata.
 */
var ComponentWalker = (function (_super) {
    __extends(ComponentWalker, _super);
    function ComponentWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ComponentWalker.prototype.visitInlineTemplate = function (template) { };
    ComponentWalker.prototype.visitInlineStylesheet = function (stylesheet) { };
    ComponentWalker.prototype.visitExternalTemplate = function (template) { };
    ComponentWalker.prototype.visitExternalStylesheet = function (stylesheet) { };
    ComponentWalker.prototype.visitNode = function (node) {
        if (node.kind === ts.SyntaxKind.CallExpression) {
            var callExpression = node;
            var callExpressionName = callExpression.expression.getText();
            if (callExpressionName === 'Component' || callExpressionName === 'Directive') {
                this._visitDirectiveCallExpression(callExpression);
            }
        }
        _super.prototype.visitNode.call(this, node);
    };
    ComponentWalker.prototype._visitDirectiveCallExpression = function (callExpression) {
        var directiveMetadata = callExpression.arguments[0];
        if (!directiveMetadata) {
            return;
        }
        for (var _i = 0, _a = directiveMetadata.properties; _i < _a.length; _i++) {
            var property = _a[_i];
            var propertyName = property.name.getText();
            var initializerKind = property.initializer.kind;
            if (propertyName === 'template') {
                this.visitInlineTemplate(property.initializer);
            }
            if (propertyName === 'templateUrl' && initializerKind === ts.SyntaxKind.StringLiteral) {
                this._reportExternalTemplate(property.initializer);
            }
            if (propertyName === 'styles' && initializerKind === ts.SyntaxKind.ArrayLiteralExpression) {
                this._reportInlineStyles(property.initializer);
            }
            if (propertyName === 'styleUrls' && initializerKind === ts.SyntaxKind.ArrayLiteralExpression) {
                this._visitExternalStylesArrayLiteral(property.initializer);
            }
        }
    };
    ComponentWalker.prototype._reportInlineStyles = function (inlineStyles) {
        var _this = this;
        inlineStyles.elements.forEach(function (element) {
            _this.visitInlineStylesheet(element);
        });
    };
    ComponentWalker.prototype._visitExternalStylesArrayLiteral = function (styleUrls) {
        var _this = this;
        styleUrls.elements.forEach(function (styleUrlLiteral) {
            var styleUrl = literal_1.getLiteralTextWithoutQuotes(styleUrlLiteral);
            var stylePath = path_1.join(path_1.dirname(_this.getSourceFile().fileName), styleUrl);
            _this._reportExternalStyle(stylePath);
        });
    };
    ComponentWalker.prototype._reportExternalTemplate = function (templateUrlLiteral) {
        var templateUrl = literal_1.getLiteralTextWithoutQuotes(templateUrlLiteral);
        var templatePath = path_1.join(path_1.dirname(this.getSourceFile().fileName), templateUrl);
        // Check if the external template file exists before proceeding.
        if (!fs_1.existsSync(templatePath)) {
            console.error("PARSE ERROR: " + this.getSourceFile().fileName + ":" +
                (" Could not find template: \"" + templatePath + "\"."));
            process.exit(1);
        }
        // Create a fake TypeScript source file that includes the template content.
        var templateFile = component_file_1.createComponentFile(templatePath, fs_1.readFileSync(templatePath, 'utf8'));
        this.visitExternalTemplate(templateFile);
    };
    ComponentWalker.prototype._reportExternalStyle = function (stylePath) {
        // Check if the external stylesheet file exists before proceeding.
        if (!fs_1.existsSync(stylePath)) {
            console.error("PARSE ERROR: " + this.getSourceFile().fileName + ":" +
                (" Could not find stylesheet: \"" + stylePath + "\"."));
            process.exit(1);
        }
        // Create a fake TypeScript source file that includes the stylesheet content.
        var stylesheetFile = component_file_1.createComponentFile(stylePath, fs_1.readFileSync(stylePath, 'utf8'));
        this.visitExternalStylesheet(stylesheetFile);
    };
    /** Creates a TSLint rule failure for the given external resource. */
    ComponentWalker.prototype.addExternalResourceFailure = function (file, message, fix) {
        var ruleFailure = new tslint_1.RuleFailure(file, file.getStart(), file.getEnd(), message, this.getRuleName(), fix);
        this.addFailure(ruleFailure);
    };
    return ComponentWalker;
}(tslint_1.RuleWalker));
exports.ComponentWalker = ComponentWalker;
//# sourceMappingURL=component-walker.js.map