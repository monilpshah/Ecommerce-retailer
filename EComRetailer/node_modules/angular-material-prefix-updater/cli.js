#! /usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var yargs_1 = require("yargs");
var chalk_1 = require("chalk");
var fs_1 = require("fs");
var path_1 = require("path");
var child_process_1 = require("child_process");
var switchStylesheetsRule_1 = require("./rules/switchStylesheetsRule");
var find_tslint_binary_1 = require("./tslint/find-tslint-binary");
var ora = require("ora");
// Register a help page in yargs.
yargs_1.help();
// Register the project option in yargs.
yargs_1.option('project', {
    alias: 'p',
    describe: 'Path to the tsconfig.json file of the project',
    string: true,
    required: true
});
yargs_1.option('extra-stylesheets', {
    alias: ['es', 'extra-css'],
    describe: 'Glob that matches additional stylesheets that should be migrated',
    string: true,
    array: true,
    required: false
});
/** Path to the TypeScript project. */
var projectPath = yargs_1.argv.project;
// Exit the process if the specified project does not exist.
if (!fs_1.existsSync(projectPath)) {
    console.error(chalk_1.red('Specified project path is not valid. File or directory does not exist!'));
    process.exit(1);
}
// If the project path links to a directory, automatically reference the "tsconfig.json" file.
if (fs_1.statSync(projectPath).isDirectory()) {
    projectPath = projectPath + "/tsconfig.json";
}
if (projectPath) {
    var migrationConfig = path_1.resolve(__dirname, 'rules', 'tslint-migration.json');
    // Command line arguments for dispatching the TSLint executable.
    var tslintArgs = ['-c', migrationConfig, '-p', projectPath, '--fix'];
    var childProcessEnv = __assign({}, process.env);
    if (yargs_1.argv.extraStylesheets) {
        // Since TSLint runs in another node process and we want to apply the fixes for extra
        // stylesheets through TSLint we need to transfer the glob of stylesheets to the child
        // process.
        childProcessEnv[switchStylesheetsRule_1.EXTRA_STYLESHEETS_GLOB_KEY] = yargs_1.argv.extraStylesheets.join(' ');
    }
    migrateProject(tslintArgs, childProcessEnv);
}
/** Starts the migration of the specified project in the TSLint arguments. */
function migrateProject(tslintArgs, env) {
    var tslintBin = find_tslint_binary_1.findTslintBinaryPath();
    var spinner = ora('Migrating the specified Angular Material project').start();
    // Run the TSLint CLI with the configuration file from the migration tool.
    var tslintProcess = child_process_1.spawn('node', [tslintBin].concat(tslintArgs), { env: env });
    var stdout = '';
    var stderr = '';
    tslintProcess.stdout.on('data', function (data) { return stdout += data.toString(); });
    tslintProcess.stderr.on('data', function (data) { return stderr += data.toString(); });
    tslintProcess.on('close', function (status) {
        // Clear the spinner output before printing messages, because Ora is not able to clear the
        // spinner properly if there is console output after the previous spinner output.
        spinner.clear();
        if (status !== 0 || stderr.trim()) {
            console.error("\n" + stderr.trim() + "\n");
            console.error(chalk_1.yellow('Make sure the following things are done correctly:'));
            console.error(chalk_1.yellow(' • Angular Material is installed in the project (for type checking)'));
            console.error(chalk_1.yellow(' • The Angular Material version is not higher than "beta.11"'));
            console.error(chalk_1.yellow(' • Project "tsconfig.json" configuration matches the desired files'));
            console.error();
            spinner.fail('Errors occurred while migrating the Angular Material project.');
        }
        else {
            if (stdout.trim()) {
                console.info("\n" + stdout.trim() + "\n");
            }
            spinner.succeed('Successfully updated the project source files.');
        }
    });
}
//# sourceMappingURL=cli.js.map